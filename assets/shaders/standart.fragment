#version 330 core
out vec4 FragColor;

in vec2 TexCoord;
in vec3 Normal;
in vec3 FragPos;
in mat3 TBN;

uniform bool use_normal;
uniform bool use_specular;
uniform bool use_diffuse;
uniform bool use_blinn;
uniform bool emit;

uniform vec3 viewPos;
uniform vec3 lightColor;
uniform vec3 objectColor;
uniform vec3 diffuse_color;

uniform float shine;
uniform float reflection;
uniform float spec_factor;
uniform float ref_ratio;
uniform float normal_bump;
uniform float dif;


uniform vec2 uv_scale;

uniform float sky_val;




uniform sampler2D oText;
uniform sampler2D sText;
uniform sampler2D nText;
uniform samplerCube skybox;

struct PointLight {    
    vec3 position;
    vec3 color;

    float strength;
    float constant;
    float radius;
};

uniform int light_number;

#define NR_POINT_LIGHTS 64
uniform PointLight pointLights[NR_POINT_LIGHTS];


vec4 calculatePointLight(PointLight light, vec3 norm, vec3 FragPos, vec3 viewDir, vec2 uv) 
{
    float distance = length(light.position - FragPos);
    float attenuation = smoothstep(light.radius, 0, distance);

    vec3 lightDir = normalize(light.position - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);

    vec3 diffuse;

    if (use_diffuse) {
        diffuse = diff * texture(oText, vec2(uv.x, 1.0 - uv.y)).rgb * light.color * dif * diffuse_color;
    } else {
        diffuse = diff * light.color * dif * diffuse_color;
    }
    
    float nDot = dot(norm, lightDir);

    float spec;

    if (use_blinn) {
        vec3 halfwayDir = normalize(lightDir + viewDir);
        spec = pow(max(dot(norm, halfwayDir), 0.0), shine);
    } else {
         vec3 reflectDir = reflect(lightDir, norm);
        spec = pow(max(dot(viewDir, -reflectDir), 0.0), shine);
    }
 
    vec3 specular = vec3(0.0, 0.0, 0.0);

    if (nDot > 0) {
        if(use_specular) {
            specular = spec * light.color * vec3(texture(sText, vec2(uv.x, 1.0 - uv.y))).r * spec_factor * light.color * nDot;
        } else {
            specular = spec * light.color * spec_factor * light.color * nDot;
        }
        
    }
    diffuse *= light.strength * attenuation;
    specular *= light.strength * attenuation;
    vec3 result = (diffuse + specular);
    return vec4(result, 1.0) ;
}






void main()
{
   
    vec2 new_TexCoord = uv_scale * TexCoord;

    vec3 norm = texture(nText, vec2(new_TexCoord.x, 1.0 - new_TexCoord.y)).rgb ;
    norm = norm * 2.0 - 1.0;
    norm.xy *= normal_bump;
    norm = normalize(TBN * norm);
    if(normal_bump < 0.01 || use_normal == false) {
        norm = normalize(Normal);
    }
    vec3 viewDir = normalize(viewPos - FragPos);

    vec3 result = vec3(0.0, 0.0, 0.0);

    vec3 ambient = lightColor * sky_val;
    ambient  = ambient * texture(oText, vec2(new_TexCoord.x, 1.0 - new_TexCoord.y)).rgb;

    for(int i = 0; i < light_number; i++)
        result += calculatePointLight(pointLights[i], norm, FragPos, viewDir, new_TexCoord).rgb;    

    vec3 R = refract(-viewDir, normalize(-norm), ref_ratio);
    vec3 refl = texture(skybox, R).rgb;
    result += refl * reflection * sky_val;

    if (use_diffuse) {
        result += ambient;
    } 

    if (emit) {
        result =  vec3(diffuse_color);
    }
    FragColor = vec4(result, 1.0);
}